### Place a bid on a certain auction
POST http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
  "bid": 100,
  "id": 3
}

### Try to bid to little or same amount
POST http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
  "bid": 90,
  "id": 3
}

> {%
 client.test("Request executed succesfully", function(){
    client.assert(response.status === 404, "Response status is not 200, "  + response.status)
});
 client.test("Check body" , function(){
    client.assert(response.body.error, "There is no items")
});
 %}

### invalid auction find
POST http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
"id": 90
}

> {%
 client.test("Request executed succesfully", function(){
    client.assert(response.status === 404, "Response status is not 200, "  + response.status)
});
 client.test("Check body" , function(){
    client.assert(response.body.error, "There is no items")
});
 %}

### invalid auction find auction already ended
POST http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
  "id": 2
}

> {%
 client.test("Request executed succesfully", function(){
    client.assert(response.status === 404, "Response status is not 200, "  + response.status)
});
 client.test("Check body" , function(){
    client.assert(response.body.error, "There is no items")
});
 %}

### invalid auction forgot to put in the bid
POST http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
  "id": 1
}

> {%
 client.test("Request executed succesfully", function(){
    client.assert(response.status === 404, "Response status is not 200, "  + response.status)
});
 client.test("Check body" , function(){
    client.assert(response.body.error, "There is no items")
});
 %}



### Try to bid with an string
POST http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
  "bid": "abc",
  "id": 3
}

> {%
 client.test("Request executed succesfully", function(){
    client.assert(response.status === 404, "Response status is not 200, "  + response.status)
});
 client.test("Check body" , function(){
    client.assert(response.body.error, "There is no items")
});
 %}



### delete bid
DELETE http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
  "id": 3
}

> {%
 client.test("Request executed succesfully", function(){
    client.assert(response.status === 200, "Response status is not 200, "  + response.status)
});
 client.test("Check body" , function(){
    client.assert(response.body.item, "There is no items")
});
 %}

### Find an item that doesnt exist
DELETE http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{token}}

{
  "bid": 30
}

> {%
 client.test("Request executed succesfully", function(){
    client.assert(response.status === 404, "Response status is not 200, "  + response.status)
});
 client.test("Check body" , function(){
    client.assert(response.body.error, "There is no items")
});
 %}

### Admin can delete everything
DELETE http://localhost:3000/bid/
Content-Type: application/json
Accept: application/json
Authorization: Bearer {{admin_token}}

{
  "id": 1
}

> {%
 client.test("Request executed succesfully", function(){
    client.assert(response.status === 200, "Response status is not 200, "  + response.status)
});
 client.test("Check body" , function(){
    client.assert(response.body.item, "There is no items")
});
 %}

